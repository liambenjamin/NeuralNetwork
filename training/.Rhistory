control = c(10,13.2,19.8,19.3,21.2,13.9,20.3,9.6)
ancy = c(13.2, 19.5, 11, 5.8, 12.8, 7.1, 7.7)
sd(control)
sd(ancy)
n1 = length(control)
n2 = length(ancy)
sd.1 = sd(control)
sd.2 = sd(ancy)
mean(control)
control = c(10,13.2,19.8,19.3,21.2,13.9,20.3,9.6)
ancy = c(13.2, 19.5, 11, 5.8, 12.8, 7.1, 7.7)
mean(control)
pool_var = function(A, B) {
sd.1 = sd(A)
sd.2 = sd(B)
n.1 = length(A)
n.2 = length(B)
top = (n.1-1)*sd.1^2 + (n.2-1)*sd.2^2
bottom = n.1 + n.2 - 2
return(top / bottom)
}
sp = sqrt(pool_var(control, ancy))
sp
pool_var(control,ancy)
t.stat = function(A,B){
sp = sqrt(pool_var(A,B))
x.bar.1 = mean(A)
x.bar.2 = mean(b)
n.1 = length(A)
n.2 = length(B)
t = (x.bar.1 - x.bar.2) / (sp * sqrt(1/n.1 + 1/n.2))
return(t)
}
t.stat(control,ancy)
x.bar.1 = mean(A)
t.stat(control,ancy)
n.1 = length(A)
t.stat = function(A,B){
sp = sqrt(pool_var(A,B))
x.bar.1 = mean(A)
x.bar.2 = mean(B)
n.1 = length(A)
n.2 = length(B)
t = (x.bar.1 - x.bar.2) / (sp * sqrt(1/n.1 + 1/n.2))
return(t)
}
t.stat(control,ancy)
df = length(control) + length(ancy) - 2
df
t.star = t.stat(control,ancy)
p.val = 2 * pt(t.star, df, lower.tail = F)
p.val
# return interval
interval = paste0("(",lower,upper,")")
conf.int = function(A,B,level=0.99){
# compute interval components from data
alpha.2 = (1-level)/2
sp = sqrt(pool_var(A,B))
pt.est = mean(A) - mean(B)
n.1 = length(A)
n.2 = length(B)
df = n.1 + n.2 - 2
t.star = qt(1-alpha.2, df)
# margin of error
mar.err = t.star * sp * sqrt(1/n.1 + 1/n.2)
# construct interval bounds
lower = pt.est - mar.err
upper = pt.est + mar.err
# return interval
interval = paste0("(",lower,upper,")")
return(interval)
}
conf.int(control,ancy)
conf.int = function(A,B,level=0.99){
# compute interval components from data
alpha.2 = (1-level)/2
sp = sqrt(pool_var(A,B))
pt.est = mean(A) - mean(B)
n.1 = length(A)
n.2 = length(B)
df = n.1 + n.2 - 2
t.star = qt(1-alpha.2, df)
# margin of error
mar.err = t.star * sp * sqrt(1/n.1 + 1/n.2)
# construct interval bounds
lower = round(pt.est - mar.err, 3)
upper = round(pt.est + mar.err, 3)
# return interval
interval = paste0("(",lower," ",upper,")")
return(interval)
}
conf.int(control,ancy)
alpha.2 = (1-0.99)/2
df = 13
t.star = qt(1-alpha.2, df)
t.star
t.star * sp * sqrt(1/8 + 1/7)
pt.est = mean(control) - mean(ancy)
mar.err = t.star * sp * sqrt(1/n.1 + 1/n.2)
mar.err = t.star * sp * sqrt(1/8 + 1/7)
lower = round(pt.est - mar.err, 3)
upper = round(pt.est + mar.err, 3)
lower
upper
mar.err
sp
t.star * sp * sqrt(1/n.1 + 1/n.2)
n.1 = length(control)
n.2 = length(ancy)
t.star * sp * sqrt(1/n.1 + 1/n.2)
t.star * sp^2 * sqrt(1/n.1 + 1/n.2)
df
conf.int(control,ancy)
t.test(control, ancy, var.equal = T, level = 0.99)
?t.test
t.test(control, ancy, var.equal = T, conf.level = 0.99)
conf.int(control,ancy)
mar.err
data = rnorm(100)
hist(data)
hist(c(rnorm(100), rep(3,25), rep(3.5,56)))
hist(c(rnorm(100), rep(3,25), rep(3.5,11)))
hist(c(rnorm(100), rep(3,8), rep(3.5,11)))
hist(c(rnorm(100), rep(3,8), rep(5.5,11)))
(307+311+311+313+317+318+318+324+336+338+353)/11
4.5/3.9
4.5/3.9
1-0.8749
1.5/3.9
2.5/3.9
(1.5*3.9)+45.5
seed(3)
set.seed(3)
dat = c(rnorm(30), runif(20, 2,3))
hist(dat)
dat = c(rnorm(50), runif(20, 2,3))
hist(dat)
dat = c(rnorm(50), runif(20, 1,3))
hist(dat)
dat = c(rnorm(50), runif(50, 1,3))
hist(dat)
set.seed(3)
dat = c(rnorm(50), runif(60, 1,3))
hist(dat)
set.seed(3)
dat = c(rnorm(50), runif(70, 0,3))
hist(dat)
set.seed(3)
dat = c(rnorm(50, mean=1), runif(70, 0,3))
hist(dat)
set.seed(3)
dat = c(rnorm(50, mean=1), runif(50, 0,3))
hist(dat)
set.seed(3)
dat = c(rnorm(50, mean=1), runif(30, 0,3))
hist(dat)
set.seed(1)
dat = c(rnorm(50, mean=1), runif(30, 0,3))
hist(dat)
dat = c(rnorm(50, mean=1), runif(30, 1,3))
hist(dat)
dat = c(rnorm(100, mean=1), runif(30, 2,5))
hist(dat)
set.seed(1)
dat = c(rnorm(100, mean=1), runif(30, 2,5))
hist(dat)
dat = c(rnorm(100, mean=1), runif(30, 5,8))
hist(dat)
dat = c(rnorm(100, mean=1), runif(30, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(1000, mean=1), runif(30, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(500, mean=1), runif(30, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(500, mean=1), runif(50, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(500, mean=0), runif(50, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(1000, mean=0), runif(200, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(1000, mean=0, sd = 0.5), runif(200, 3,8))
hist(dat)
set.seed(1)
dat = c(rnorm(1000, mean=0, sd=0.75), runif(200, 3,8))
hist(dat)
hist(dat, main="Right Skewed Data")
set.seed(1)
dat = c(rnorm(1000, mean=0, sd=0.75), runif(200, 3,8))
hist(dat, main="Right Skewed Data")
set.seed(1)
dat = c(rnorm(1000, mean=0, sd=0.75), runif(200, 3,8))
dat2 = c(rnorm(1000, mean=0, sd=0.75), runif(200, -8,-3))
hist(dat, main="Right Skewed Data")
hist(dat2, main="Left Skewed Data")
layout(matrix(c(1,2), nrow=1))
hist(dat, main="Right Skewed Data")
hist(dat2, main="Left Skewed Data")
0.8944-0.1056
0.8944-0.1056
(0.8944-0.1056)*25
getwd()
prize = c("$5000","$1000","$50","$5","0")
?kable
getwd()
(5000+5000+5000+2500)/5000
1/5000 * ((5000-3.5)^2+5*(1000-3.5)^2+100*(50-3.5)^2+500*(5-3.5)^2+4394*(0-3.5)^2)
sqrt(6040.25)
50 * 3.5
77.72 * sqrt(50)
-170 / 549.56
gmat = c(600,580,480,710,600)
gpa = c(3.7,3.0,3.2,4.0,3.5)
mean(gpa)
mean(gmat)
sd(gmat)
mean(gpa)
sd(gpa)
install.packages("rmarkdown")
4+4
x = c(1,2,3,4,5)
x
y
y = 20
y
?c
data = c(5.99, 5.84, 5.95, 6.09, 5.93, 5.88, 5.92, 6.04, 6.00, 5.89, 5.95, 5.97, 5.90, 5.91, 6.03, 5.89, 5.98)
?summary
data
summary(data)
?sort
sort(data)
sort(data, decreasing = TRUE)
# find the 20th quantile
# we can order the dataset using the `sort()` function
sorted.data = sort(data)
sorted.data
n = 17 # number of data points
p = .20 # quantile we are interested in finding
np.int = n * p
np.int
sorted.data
quant.20 = sorted.data[4]
quant.20
summary(data)
boxplot(data)
boxplot(data, main="Milk Container Volume", ylab = "Volume in Ounces")
hist(data, main="Milk Container Volume")
hist(data, main="Milk Container Volume", xlab="Volume in Ounces")
setwd("~/Desktop/NN_Implementation/training")
data = read.csv("lambda_info")
pwd()
getwd()
data = read.csv("lambda_info.csv")
View(data)
hist(data$x1)
hist(data$x2)
hist(data$x3)
